generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            Role     @default(USER)
  email           String?  @unique
  password        String
  firstName       String
  middleName      String?
  lastName        String
  birthDay        String
  country         String
  city            String
  deliveryAddress String?
  phone           String?
  isActive        Boolean  @default(true)
  createdItems    Item[]   @relation("CreatedBy")
  ownedItems      Item[]   @relation("OwnedBy")
  createdSwaps    Swap[]   @relation("SwapCreatedBy")
  swapsFrom       Swap[]   @relation("SwapFrom")
  swapsTo         Swap[]   @relation("SwapTo")
}

enum Role {
  ADMIN
  USER
}

model Item {
  id              String   @id @default(uuid())
  name            String
  description     String
  isActive        Boolean  @default(true)
  price           Float?
  photos          String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation("CreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  ownedBy         User     @relation("OwnedBy", fields: [ownedByUserId], references: [id])
  ownedByUserId   String
  outgoingSwap    Swap?    @relation("OutgoingItems", fields: [outgoingSwapId], references: [id])
  outgoingSwapId  String?
  incomingSwap    Swap?    @relation("IncomingItems", fields: [incomingSwapId], references: [id])
  incomingSwapId  String?
}

model Swap {
  id              String     @id @default(uuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  createdBy       User       @relation("SwapCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  status          SwapStatus @default(PENDING)
  fromUser        User       @relation("SwapFrom", fields: [fromUserId], references: [id])
  fromUserId      String
  toUser          User       @relation("SwapTo", fields: [toUserId], references: [id])
  toUserId        String
  outgoingItems   Item[]     @relation("OutgoingItems")
  incomingItems   Item[]     @relation("IncomingItems")
}

enum SwapStatus {
  PENDING
  REJECTED
  ACCEPTED
}
